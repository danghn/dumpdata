* Schema guideline

- Betbrain business focuses on 3 main entities: Event and BettingOffer. 
B3 engine will have these 2 entities are main data types/tables as well.

- Denormalized: 
  + SE Event/Outcome/BettingOffer are mapped into B3 types of same names
  + Other entities are denormalized into these main entities
   
- Field mapping:
  + Each SE entity goes into one data column, in json format (one B3 record has multiple columns, 
    each column is corresponding to one SE entity)
  + All IDs in one entity (entity ID, parent IDs, child IDs) are extracted, stored duplicated in
    its own column in a B3 record. 

- Handling main entity's links: Possible link types are:
  + 1:1 UP/DOWN: Use lookup table
  + 1:n DOWN: not exists
  + 1:n UP: Lookup table
  
- Handling 1:n relations: Two methods:
  + Method 1: Use nosql collections + table relation for back referencing in updating
  + Method 2: Use table relation (see below)
  + Depend on data's characteristics, either method can be used.
  + Nosql collection is preferred. Relation table is considered 
    only in case of large number of child entities (not suitable to nosql collections). 

- Handling Parts (unlimited nesting):
  + Entity and EntityPart are modeled using one super data structure (containing all fields of the two)
  + Two are distinguished using a marker in key 
  + unlimited nested structures: Handled by a lookup table (below)

- Handling revisions option 1: All changes to an entity are kept as a full data record

- Handling revisions option 2: 
   + 2 full records, one for base and one for current revisions
   + diffs from the base, for historical revisions
   
- Indexes: Additional secondary indexes can be configured to serve the purposes of reports

I/ Table initial_dump

a/ Key spec: sequenceId
b/ Column: entity_json

II/ Table changebatch

a/ Key spec: batchId
b/ Column: entity_json

III/ Table lookup

a/ Key spec: entityClass/entityId
b/ Columns: link1Id, link2Id, ...

* Usuage: Used to find IDs of parent entities

Example: Find event_type_id from an event_id

IV/ Table relation

a/ Key spec: childEntityClass/entityClass/entityId/childEntityId
b/ Columns: no columns if child entity is denormalized by collection, 
   otherwise child entity's json & linking IDs

* Usage: 
  + Find children of a parent (find events belong to an eventType)
  + Finding is done by scanning a key-range: child_entity_class/entity_class/entity_id/*
  + Updating a child: Scan child_entity_class/*
  + This table is ONLY used in method 2 of handling relation

Example key data: EventType/type1/Event/event1

V/ Table event

a/ Key spec: sportId/eventTypeId/[EVENT|EVENTPART]/eventId

b/ Columns:

VI/ Table betting_offer

a/ Key spec: sportId/eventTypeId/[EVENT|EVENTPART]/eventId/
             bettingTypeId/outcomeId/bettingOfferId/[BLANK|revision_number]

* SE entities mapping to B3 tables
A/ Event-related entities
1/ Event
  + Existing IDs: id, typeId, sportId, templateId, promotionId, parentId, parentPartId, 
    venueId, rootPartId, currentPartId
  + Link type: N/A
  + Denormalization method: N/A
  + Table event: (sportId/eventTypeId/EVENT/eventId), EVENT_id, EVENT_typeId,
    EVENT_sportId, EVENT_templateId, EVENT_promotionId, EVENT_parentId, EVENT_parentPartId, 
    EVENT_venueId, EVENT_statusId, EVENT_rootPartId, EVENT_currentPartId, EVENT_entity (json)
    
  + Table lookup: (EVENT/eventId), typeId, sportId, templateId, promotionId 
    parentId, parentPartId, venueId, statusId, rootPartId, currentPartId
    
  + Table relation:
      Insert: NOTHING
      Query: NONEED

2/ Sport
  + Existing IDs: id, parentId
  + Link type <Event-Sport>: n-1
  + Denormalization method: in-place
  + Table event: (sportId/eventTypeId*/[EVENT|EVENTPART]/eventId*), 
                 SPORT_sportId, SPORT_parentId, SPORT_entity (json)
  + Table lookup: (SPORT/sportId), parentId
  + Table relation: 
      Insert: (EVENT/SPORT/sportId/eventId), [no columns]
      Query: (EVENT/SPORT/sportId/eventId*), [no columns]

3/ 	EventType
  + Existing IDs: id
  + Link type <Event-EventType>: n-1
  + Denormalization method: in-place
  + Table event: (sportId*/eventTypeId*/statusId*/[EVENT|EVENTPART]/eventId*/[BLANK|revision_number*]), 
    EVENT_typeId, EVENTTYPE_id, EVENTTYPE_entity
  + Table lookup: NOTHING
  + Table relation: 
      Insert: (EVENT/EVENTTYPE/eventTypeId/eventId), [no columns]
      Query: (EVENT/EVENTTYPE/eventTypeId/eventId*), [no columns]
  
4/ EventTypeUsage
  + Existing IDs: id, eventTypeId, sportId
  + Link type: 1-1
  + Denormalization method: in-place
  + Table event: (sportId/eventTypeId/statusId*/[EVENT|EVENTPART]/eventId*/[BLANK|revision_number*]),
    EVENTTYPEUSAGE_id, EVENTTYPEUSAGE_eventTypeId, 
    EVENTTYPEUSAGE_sportId, EVENTTYPEUSAGE_entity (json)
  + Table lookup: (EVENTTYPEUSAGE/EVENTTYPEUSAGE_id), sportId, eventTypeId
  + Table relation: 
      Insert: NOTHING
      Query: NONEED

5/ ProviderEventRelation
  + Existing IDs: id, providerId, eventId
  + Link type <Event-ProviderEventRelation>: 1-n
  + Denormalization method: collection
  + Table event: (sportId+/eventTypeId+/statusId*/[EVENT|EVENTPART]/eventId/[BLANK|revision_number*]), 
    PROVIDEREVENTRELATION_id, PROVIDEREVENTRELATION_providerId, PROVIDEREVENTRELATION_eventId, 
    PROVIDEREVENTRELATION_entity (json)
  + Table lookup: (PROVIDEREVENTRELATION/id), providerId, eventId
  + Table relation 
      Insert: (EVENT/PROVIDEREVENTRELATION/providerEventRelation_id, eventId), [no columns]
      Query: NONEED
      
B/ BettingOffer related entities
1/ BettingOffer
  + Existing IDs: id, providerId, sourceId, outcomeId, bettingTypeId, statusId
  + Link type: N/A
  + Denormalization method: N/A
  + Table bettingoffer: (sportId/eventTypeId/statusId/EVENT/eventId/BLANK), EVENT_id, EVENT_typeId,
    EVENT_sportId, EVENT_templateId, EVENT_promotionId, EVENT_parentId, EVENT_parentPartId, 
    EVENT_venueId, EVENT_statusId, EVENT_rootPartId, EVENT_currentPartId, EVENT_entity (json)
    
  + Table lookup: (EVENT/eventId), typeId, sportId, templateId, promotionId 
    parentId, parentPartId, venueId, statusId, rootPartId, currentPartId
    
  + Table relation:
      Insert: NOTHING
      Query: NONEED

